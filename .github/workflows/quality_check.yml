name: üîç Quality Assurance & Testing

on:
  # „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàÊôÇ„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - 'prompts/**'
      - 'package*.json'

  # ÊâãÂãïÂÆüË°å
  workflow_dispatch:
    inputs:
      check_type:
        description: '„ÉÅ„Çß„ÉÉ„ÇØ„Çø„Ç§„Éó„ÇíÈÅ∏Êäû'
        required: true
        type: choice
        options:
          - 'full'
          - 'code-only'
          - 'content-only'
        default: 'full'

  # ÂÆöÊúüÂÆüË°åÔºàÊØéÈÄ±ÊúàÊõúÂçàÂâç1ÊôÇÔºâ
  schedule:
    - cron: '0 1 * * 1'

env:
  NODE_VERSION: '18'

jobs:
  # „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
  code-quality:
    name: üíª Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type != 'content-only'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç ESLint Check
        run: |
          echo "üîç Running ESLint..."
          if command -v npx >/dev/null 2>&1; then
            npx eslint src/ --ext .js,.json --format unix
            echo "‚úÖ ESLint check completed"
          else
            echo "‚ö†Ô∏è ESLint not configured, skipping"
          fi

      - name: üé® Prettier Format Check
        run: |
          echo "üé® Checking code formatting..."
          if command -v npx >/dev/null 2>&1; then
            npx prettier --check "src/**/*.js" "*.json" "*.md" || echo "‚ö†Ô∏è Some files are not properly formatted"
          else
            echo "‚ö†Ô∏è Prettier not configured, skipping"
          fi

      - name: üß™ Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          if [ -d "tests/unit" ] && [ "$(ls -A tests/unit)" ]; then
            npm test
            echo "‚úÖ Unit tests completed"
          else
            echo "‚ÑπÔ∏è No unit tests found, skipping"
          fi

      - name: üìä Code Coverage Report
        run: |
          echo "üìä Generating code coverage report..."
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ Coverage report generated"
          else
            echo "‚ÑπÔ∏è No coverage data available"
          fi

  # ‰æùÂ≠òÈñ¢‰øÇ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type != 'content-only'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîí NPM Security Audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate
          echo "‚úÖ Security audit completed"

      - name: üìã Generate Security Report
        run: |
          echo "üìã Generating security summary..."
          npm audit --json > security-audit.json 2>/dev/null || true
          
          if [ -f security-audit.json ]; then
            echo "### üîí Security Audit Summary" >> $GITHUB_STEP_SUMMARY
            echo "Security audit completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

  # „Ç≥„É≥„ÉÜ„É≥„ÉÑÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
  content-quality:
    name: üìù Content Quality Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type != 'code-only'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üìã Validate Prompt Files
        run: |
          echo "üìã Validating prompt files..."
          
          prompt_count=0
          error_count=0
          
          for file in *.md prompts/*.md 2>/dev/null; do
            if [ -f "$file" ]; then
              echo "Checking: $file"
              
              # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
              size=$(wc -c < "$file")
              if [ $size -gt 100000 ]; then
                echo "‚ö†Ô∏è Large file detected: $file ($size bytes)"
              fi
              
              # ÊñáÂ≠ó„Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÉÅ„Çß„ÉÉ„ÇØ
              if file "$file" | grep -q "UTF-8"; then
                echo "‚úÖ UTF-8 encoding: $file"
              else
                echo "‚ö†Ô∏è Non-UTF-8 encoding: $file"
                ((error_count++))
              fi
              
              ((prompt_count++))
            fi
          done
          
          echo "### üìã Prompt File Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Files Checked**: $prompt_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Encoding Errors**: $error_count" >> $GITHUB_STEP_SUMMARY

      - name: üîç Test Sample Content Generation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üîç Testing content generation with sample data..."
          
          # „Çµ„É≥„Éó„É´„É™„Çµ„Éº„ÉÅ„Éá„Éº„Çø‰ΩúÊàê
          mkdir -p inputs/research_results/pending
          cat > inputs/research_results/pending/sample_test.json << 'EOF'
          {
            "title": "freeeÁ¢∫ÂÆöÁî≥Âëä„ÅÆ‰Ωø„ÅÑÊñπ„ÉÜ„Çπ„Éà",
            "keywords": ["freee", "Á¢∫ÂÆöÁî≥Âëä", "‰Ωø„ÅÑÊñπ"],
            "targetAudience": "‰ºöË®à„ÇΩ„Éï„ÉàÂàùÂøÉËÄÖ",
            "contentType": "how-to",
            "sections": [
              {"title": "freeeÁ¢∫ÂÆöÁî≥Âëä„Å®„ÅØ", "estimatedLength": "300"},
              {"title": "ÂàùÊúüË®≠ÂÆö„ÅÆÊâãÈ†Ü", "estimatedLength": "500"}
            ]
          }
          EOF
          
          # „ÉÜ„Çπ„ÉàÂÆüË°å
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "üß™ Running content generation test..."
            mkdir -p logs outputs/{parsed_research,generated_content}
            
            if timeout 300 npm run parse-research; then
              echo "‚úÖ Research parsing test successful"
            else
              echo "‚ö†Ô∏è Research parsing test failed or timed out"
            fi
          else
            echo "‚ö†Ô∏è OPENAI_API_KEY not set, skipping content generation test"
          fi

      - name: üìä WordPress Connection Test
        env:
          WORDPRESS_API_URL: ${{ secrets.WORDPRESS_API_URL }}
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_APP_PASSWORD: ${{ secrets.WORDPRESS_APP_PASSWORD }}
        run: |
          echo "üìä Testing WordPress connection..."
          
          if [ -n "$WORDPRESS_API_URL" ] && [ -n "$WORDPRESS_USERNAME" ] && [ -n "$WORDPRESS_APP_PASSWORD" ]; then
            # WordPress APIÊé•Á∂ö„ÉÜ„Çπ„Éà
            node -e "
              const WordPressClient = require('./src/core/wordpress_client');
              const client = new WordPressClient();
              client.testConnection()
                .then(success => {
                  console.log(success ? '‚úÖ WordPressÊé•Á∂ö„ÉÜ„Çπ„ÉàÊàêÂäü' : '‚ùå WordPressÊé•Á∂ö„ÉÜ„Çπ„ÉàÂ§±Êïó');
                  process.exit(success ? 0 : 1);
                })
                .catch(error => {
                  console.error('‚ùå WordPressÊé•Á∂ö„Ç®„É©„Éº:', error.message);
                  process.exit(1);
                });
            "
          else
            echo "‚ö†Ô∏è WordPress credentials not set, skipping connection test"
          fi

  # „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà
  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'full'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: ‚ö° Memory Usage Test
        run: |
          echo "‚ö° Testing memory usage..."
          
          # „É°„É¢„É™‰ΩøÁî®Èáè„ÉÜ„Çπ„Éà
          node -e "
            const usage = process.memoryUsage();
            console.log('Memory Usage:');
            console.log('- RSS:', Math.round(usage.rss / 1024 / 1024), 'MB');
            console.log('- Heap Used:', Math.round(usage.heapUsed / 1024 / 1024), 'MB');
            console.log('- Heap Total:', Math.round(usage.heapTotal / 1024 / 1024), 'MB');
            console.log('- External:', Math.round(usage.external / 1024 / 1024), 'MB');
            
            if (usage.heapUsed > 512 * 1024 * 1024) {
              console.log('‚ö†Ô∏è High memory usage detected');
              process.exit(1);
            } else {
              console.log('‚úÖ Memory usage within normal range');
            }
          "

      - name: ‚è±Ô∏è Processing Time Test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "‚è±Ô∏è Testing processing time..."
          
          if [ -n "$OPENAI_API_KEY" ]; then
            start_time=$(date +%s)
            
            # „Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÅßÂá¶ÁêÜÊôÇÈñì„ÉÜ„Çπ„Éà
            mkdir -p inputs/research_results/pending logs outputs/{parsed_research,generated_content}
            
            echo '{"title":"Performance Test","keywords":["test"],"contentType":"how-to"}' > inputs/research_results/pending/perf_test.json
            
            if timeout 180 npm run parse-research; then
              end_time=$(date +%s)
              duration=$((end_time - start_time))
              echo "‚úÖ Processing completed in ${duration} seconds"
              
              if [ $duration -gt 120 ]; then
                echo "‚ö†Ô∏è Processing time longer than expected"
              fi
            else
              echo "‚ö†Ô∏è Processing test timed out or failed"
            fi
          else
            echo "‚ÑπÔ∏è Performance test skipped (no API key)"
          fi

  # ÊúÄÁµÇ„É¨„Éù„Éº„ÉàÁîüÊàê
  generate-report:
    name: üìã Generate QA Report
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, content-quality, performance-test]
    if: always()

    steps:
      - name: üìã Collect Results
        run: |
          echo "üìã Collecting quality assurance results..."
          
          code_status="${{ needs.code-quality.result }}"
          security_status="${{ needs.security-audit.result }}"
          content_status="${{ needs.content-quality.result }}"
          perf_status="${{ needs.performance-test.result }}"
          
          echo "### üîç Quality Assurance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check Type | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üíª Code Quality | $([ "$code_status" = "success" ] && echo "‚úÖ Pass" || echo "‚ùå Fail") | $code_status |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Audit | $([ "$security_status" = "success" ] && echo "‚úÖ Pass" || echo "‚ùå Fail") | $security_status |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Content Quality | $([ "$content_status" = "success" ] && echo "‚úÖ Pass" || echo "‚ùå Fail") | $content_status |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Performance | $([ "$perf_status" = "success" ] && echo "‚úÖ Pass" || [ "$perf_status" = "skipped" ] && echo "‚è≠Ô∏è Skip" || echo "‚ùå Fail") | $perf_status |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: $(
            if [ "$code_status" = "success" ] && [ "$security_status" = "success" ] && [ "$content_status" = "success" ] && ([ "$perf_status" = "success" ] || [ "$perf_status" = "skipped" ]); then
              echo "‚úÖ All checks passed"
            else
              echo "‚ö†Ô∏è Some checks failed"
            fi
          )" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: Quality Check #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

      - name: üìä Upload QA Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-report-${{ github.run_number }}
          path: |
            security-audit.json
            coverage/
          retention-days: 30
          if-no-files-found: ignore